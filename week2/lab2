1.TO FIND THE REVERSE OF A NUMBER

#include<stdio.h>
int reverse(int x)
{
    int reverse=0;
    int rem=0;
    while(x>0)
    {
        rem=x%10;
        reverse=reverse*10+rem;
        x=x/10;
    }
    return reverse;
}
int main()
{
    int x;
    {
        printf("enter the number\n");
        scanf("%d",&x);
    }
    if (x==reverse(x))
    {
        printf("the number is palindrome\n");
    }
    if (x!=reverse(x))
    {
        printf("the number is not a palindrome\n");
    }
}

2.HORNER'S METHOD

#include<stdio.h>
int s(int n,int a[n+1],int x);
int main()
{
    int n,x,sum;
    printf("enter the degree and the value of x\n");
    scanf("%d%d",&n,&x);
    int a[n+1];
    printf("enter the co-efficients:\n");
    for (int i=n;i>=0;i--)
    {
        scanf("%d",&a[i]);
    }
    sum=s(n,a,x);
    printf("the sim of the polynomial %d.\n",sum);
    return 0;
}
int s(int n,int a[n+1],int x)
      {
          int sum=0;
          for(int i=n;i>0;i--)
          {
              sum=(sum+a[i])*x;
          }
          sum=sum+a[0];
          return sum;
      }


3.TAYLORS PROGRAM

#include<stdio.h>
#include<math.h>

float convert_radian(float d)
{
	float rad;
	rad=(3.1412/180)*d;
	return rad;
}
float compute(float x)
{
	float term,sum,diff,prev;
	int i;
	term=sum=diff=x;
	for(i=3;diff>0.000001;i=i+2)
	{
		prev=term;
		term=(-term*x*x)/(i*(i-1));
		diff=fabs(prev-term);
		sum=sum+term;
	}
	return sum;
}
int main()
{
	float degree,x,sum,res;
	sum=0;
	res=0;
	printf("enter the degree\n");
	scanf("%f",&degree);
	x= convert_radian(degree);
	sum=compute(x);
	printf("sin(%f)=%f",degree,sum);
	res=sinf(x);
	printf("comparing res and sinf%f",res);
}

4.LEAP YEAR


#include<stdio.h>
int is leap(int year)
{
    if(year%400==0)
    {
        return 0;
    }
    else if(year%100==0)
    {
        return 1;
    }
    else if(year%4==0)
    {
        return 2;
    }
    else
    {
        return -1;
    }
    int main()
    {
        printf("enter the year\n");
        scanf("%d",&year);
        int r=is leap (year);
        switch(r)
        {
            case -1:
            printf("%d is not a leap year");
            break;
            case 0:
            printf("%d is a quadrenal leap year");
            break;
            case 1:
            printf("%d is a century year and not a leap year\n",year);
            break;
            case 2:
            printf("%d is a leap year\n",year);
            break;
            default:
            break;
        }
        return 0;
    }
   
   
 5.  COMPLEX NUMBERS
   
   
   #include<stdio.h>
#include<math.h>
struct complex{
    float real,imag;
};
struct quad{
    struct complex r1,r2;
};
int roots(float a,float b,float c,struct quad*r)
{
    if(a==0)
    {
        return -1;
    }
    float d=((b*b)-(4*a*c));
    if (d==0)
    {
        r->r1.real=r->r2.real=((-b)/(2*a));
        r->r1.imag=r->r2.imag=0;
    }
    if(d>0)
    {
        r->r1.real=(-b+sqrt(d))/(2*a);
        r->r2.real=(-b+sqrt(d))/(2*a);
        r->r1.imag=r->r2.imag=0;
        return 1;
    }
    r->r1.real=r->r2.real=(-b)/(2*a);
    r->r1.imag=(sqrt(-d))/(2*a);
    r->r2.imag=(sqrt(-d))/(2*a);
    return 2;
}
int main()
{
    float a,b,c;
    struct quad r;
    printf("enter the coefficients of the quadratic equation a,b and c");
    scanf("%f%f%f",&a,&b,&c);
    roots(a,b,c,&r);
    printf("solution:root 1\n the real part of root 1 is %f \n"'r.r1.real);
    printf("the imaginary part of root is %f \n",r.r1.imag);
    printf("solution:root 2\n the real part of root 2 is %f \n"'r.r2.real);
    printf("the imaginary part of root is %f \n",r.r2.imag);
    return 0;
           }
           

6.SQUARE ROOT
